import pygame, random

def main():
    # initialize all pygame modules (some need initialization)
    pygame.init()
    # create a pygame display window
    pygame.display.set_mode((500, 600))
    # set the title of the display window
    pygame.display.set_caption('Concept of Save Files')   
    # get the display surface
    w_surface = pygame.display.get_surface() 
    # create a game object
    game = Game(w_surface)
    # start the main game loop by calling the play method on the game object
    game.play() 
    # quit pygame and clean up the pygame window
    pygame.quit() 

class Game:
    # An object in this class represents a complete game.
    
    def __init__(self, surface):
        # Initialize a Game.
        # - self is the Game to initialize
        # - surface is the display window surface object
    
        # === objects that are part of every game that we will discuss
        self.surface = surface
        self.bg_color = pygame.Color('white')
    
        self.FPS = 144
        self.game_Clock = pygame.time.Clock()
        self.close_clicked = False
        self.continue_game = True  
        
        # === game specific objects
        
    def play(self):
        # Play the game until the player presses the close box.
        # - self is the Game that should be continued or not.
    
        while not self.close_clicked:  # until player clicks close box
            # play frame
                        
            if self.continue_game:
                self.draw()
                #self.update()
                #self.decide_continue()
            self.game_Clock.tick(self.FPS) # run at most with FPS Frames Per Second         
    
    def draw(self):
        # Draw all game objects.
        # - self is the Game to draw
        
        self.surface.fill(self.bg_color) # clear the display surface first
        #self.overworld_character.draw()
        pygame.display.update() # make the updated surface appear on the display    
        
    def update(self):
        # Update the game objects for the next frame.
        # - self is the Game to update

        #self.hand_cursor.move()
        return

    def decide_continue(self):
        # Check and remember if the game should continue
        # - self is the Game to check

        self.continue_game = True
            
